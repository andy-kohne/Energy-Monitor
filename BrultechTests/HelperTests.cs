using Brultech;
using System;
using System.Linq;
using Xunit;

namespace BrultechTests;

public class HelperTests
{
    public static readonly byte[] SampleA = new byte[]
    {
        0xFE, 0xFF, 0x03, 0x04, 0xD6, 0x24, 0x7B, 0x9C, 0x82, 0x57, 0x18, 0x75, 0x94, 0x7B, 0x06, 0xB5, 0x56, 0x5E,
        0x81, 0x57, 0x6B, 0x45, 0xA2, 0x7A, 0x06, 0x41, 0x12, 0x0C, 0x01, 0x41, 0x12, 0x98, 0x04, 0x90, 0x03, 0x15,
        0x00, 0x86, 0x75, 0x81, 0x4B, 0x20, 0x34, 0xBB, 0xF3, 0xB0, 0xAE, 0x1E, 0x90, 0x16, 0x21, 0x3E, 0x23, 0xF5,
        0xE3, 0xDE, 0x5D, 0x7E, 0x31, 0x9E, 0xFC, 0x01, 0xFF, 0xFE, 0x61,
    };


    public static readonly byte[] SampleB1 = new byte[]
    {
        0xFE, 0xFF, 0x03, 0x04, 0xCE, 0x9D, 0x1A, 0x7E, 0xCE, 0x69, 0x5E, 0xAD, 0x69, 0x3B, 0x0F, 0xF5, 0x97, 0x17,
        0x88, 0x00, 0xB5, 0x78, 0x5E, 0x0A, 0x00, 0x42, 0x12, 0x0C, 0x01, 0x42, 0x12, 0x80, 0x04, 0xDA, 0x04, 0x6A,
        0x00, 0x7C, 0x6F, 0x7D, 0xDF, 0x39, 0x90, 0xE8, 0xCE, 0x08, 0x04, 0xD4, 0x57, 0x6F, 0x55, 0xB9, 0xDC, 0xA9,
        0x36, 0xA8, 0xC4, 0xAA, 0x3A, 0x22, 0x00, 0x02, 0xFF, 0xFE, 0xE3,
    };

    public static readonly byte[] SampleB2 = new byte[]
    {
        0xFE, 0xFF, 0x03, 0x04, 0xD1, 0xEF, 0x4F, 0x81, 0xCE, 0x69, 0xA7, 0xF2, 0x69, 0x3B, 0x0F, 0xF5, 0x97, 0x17,
        0x88, 0x00, 0xB5, 0x78, 0x5E, 0x0A, 0x00, 0x42, 0x12, 0x0C, 0x01, 0x42, 0x12, 0x80, 0x04, 0xDB, 0x04, 0x69,
        0x00, 0x03, 0x70, 0x7D, 0x35, 0xF6, 0x90, 0xE8, 0xCE, 0x08, 0x04, 0xD4, 0x57, 0x6F, 0x55, 0xB9, 0xB3, 0xAC,
        0x36, 0xA8, 0x62, 0x0D, 0x3B, 0x22, 0x00, 0x02, 0xFF, 0xFE, 0x75,
    };



    [Fact]
    public void Test_GetBigEndianUShort()
    {
        for (ushort x = 0; x < ushort.MaxValue; x++)
        {
            var bigEndianBytes = (ReadOnlySpan<byte>) BitConverter.GetBytes(x).AsEnumerable().Reverse().ToArray().AsSpan();
            var y = bigEndianBytes.GetBigEndianUShort(0);
            Assert.Equal(x, y);
        }
    }

    [Fact]
    public void GetUShort()
    {
        var bytes = new byte[] { 0x23, 0x01 };
        var result = ((ReadOnlySpan<byte>)bytes.AsSpan()).GetUShort(0);

        Assert.Equal(291, result);

        result = ((ReadOnlySpan<byte>)new byte[] { 0x42, 0x12 }.AsSpan()).GetUShort(0);
        Assert.Equal(4674, result);
    }



    [Fact]
    public void DeviceSerialNumber()
    {
        Assert.Equal(4673, ((ReadOnlySpan<byte>)SampleA).GetUShort(29));
        Assert.Equal(4674, ((ReadOnlySpan<byte>)SampleB1).GetUShort(29));
        Assert.Equal(4674, ((ReadOnlySpan<byte>)SampleB2).GetUShort(29));
    }


    [Fact]
    public void Volts()
    {
        Assert.Equal(1238, ((ReadOnlySpan<byte>)SampleA).GetBigEndianUShort(3));
        Assert.Equal(1230, ((ReadOnlySpan<byte>)SampleB1).GetBigEndianUShort(3));
        Assert.Equal(1233, ((ReadOnlySpan<byte>)SampleB2).GetBigEndianUShort(3));
    }

}